{
  "address": "0x57ef7d9BB8532E7E4179dC2ce9097783470c4833",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20MintBurnable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArraysAreNotEqualLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughWithdrawableTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "addWithdrawable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7e6d28bc8e5a7bc60d74281bbf5b5698f95bcc6303120939c087560ec60c822",
  "receipt": {
    "to": null,
    "from": "0x6568322A7d8212236eA784bA0c7C2dEa1e6EAB0F",
    "contractAddress": "0x57ef7d9BB8532E7E4179dC2ce9097783470c4833",
    "transactionIndex": 2,
    "gasUsed": "535899",
    "logsBloom": "0x
    "blockHash": "0xee642f44189065d89122dddba0e5ede70403c41b8b5a24256acd6518abdf74d2",
    "transactionHash": "0xb7e6d28bc8e5a7bc60d74281bbf5b5698f95bcc6303120939c087560ec60c822",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 41935206,
        "transactionHash": "0xb7e6d28bc8e5a7bc60d74281bbf5b5698f95bcc6303120939c087560ec60c822",
        "address": "0x57ef7d9BB8532E7E4179dC2ce9097783470c4833",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000af7e68bcb2fc7295492a00177f14f59b92814e70"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xee642f44189065d89122dddba0e5ede70403c41b8b5a24256acd6518abdf74d2"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 41935206,
        "transactionHash": "0xb7e6d28bc8e5a7bc60d74281bbf5b5698f95bcc6303120939c087560ec60c822",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006568322a7d8212236ea784ba0c7c2dea1e6eab0f",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003596158d289c3000000000000000000000000000000000000000000000000773f1c9bb896c2440000000000000000000000000000000000000000000011e40ca11060a7a57e25000000000000000000000000000000000000000000000000773bc33a5fc438810000000000000000000000000000000000000000000011e40ca469c2007807e8",
        "logIndex": 16,
        "blockHash": "0xee642f44189065d89122dddba0e5ede70403c41b8b5a24256acd6518abdf74d2"
      }
    ],
    "blockNumber": 41935206,
    "cumulativeGasUsed": "1053655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x340E7B68B20C004Be6579D165b40950c60464570",
    "0xaF7E68bCb2Fc7295492A00177f14F59B92814e70"
  ],
  "numDeployments": 1,
  "solcInputHash": "b4258d82265b63b629148a0866fdb850",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20MintBurnable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArraysAreNotEqualLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughWithdrawableTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"addWithdrawable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenStaking.sol\":\"OpenStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/IERC20MintBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20MintBurnable is IERC20 {\\n    /// Mints tokens to a specific account.\\n    /// @dev Should be locked behind a permission.\\n    /// @param account The account that will receive the minted tokens.\\n    /// @param amount The amount of tokens to mint.\\n    function mint(address account, uint256 amount) external;\\n\\n    /// Burns tokens from your account.\\n    /// @param amount The amount of tokens to burn.\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x34efc6be85c2f8870f488829f141bc1a3c275be24465d1e83755dfc37e19fc17\",\"license\":\"UNLICENSED\"},\"contracts/IOpenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOpenStaking {\\n    error NotEnoughWithdrawableTokens();\\n    error ArraysAreNotEqualLength();\\n\\n    event TokensStaked(address indexed acount, uint256 amount);\\n    event TokensWithdrawn(address indexed acount, uint256 amount);\\n    event TokensWithdrawable(address indexed acount, uint256 amount);\\n}\\n\",\"keccak256\":\"0x2701ae1becbfa25ea370ecd51446d20ca20d9f27c4948e841b6be984a788589e\",\"license\":\"UNLICENSED\"},\"contracts/OpenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IERC20MintBurnable} from \\\"./IERC20MintBurnable.sol\\\";\\nimport {IOpenStaking} from \\\"./IOpenStaking.sol\\\";\\n\\ncontract OpenStaking is Ownable, IOpenStaking {\\n    IERC20MintBurnable private immutable token;\\n    mapping(address => uint256) private withdrawable;\\n\\n    constructor(IERC20MintBurnable _token, address _admin) Ownable(_admin) {\\n        token = _token;\\n    }\\n\\n    function stake(uint256 _amount) external {\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        token.burn(_amount);\\n        emit TokensStaked(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) external {\\n        if (_amount > withdrawable[msg.sender]) {\\n            revert NotEnoughWithdrawableTokens();\\n        }\\n\\n        token.mint(msg.sender, _amount);\\n        emit TokensWithdrawn(msg.sender, _amount);\\n    }\\n\\n    // CHANGE TO PROOF BASED (user pays gas fee) ?\\n    // (Address (prevent frontrun), amount, nonce (prevent replay)) ?\\n    // Proof would be built into withdraw function directly, no need for the mapping anymore\\n    function addWithdrawable(\\n        address[] calldata _accounts,\\n        uint256[] calldata _amounts\\n    ) external onlyOwner {\\n        if (_accounts.length != _amounts.length) {\\n            revert ArraysAreNotEqualLength();\\n        }\\n\\n        for (uint i; i < _accounts.length; ) {\\n            withdrawable[_accounts[i]] += _amounts[i];\\n            emit TokensWithdrawable(_accounts[i], _amounts[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x45c8bd53590ee3ee3986301b4767bea7df8d504e6a51f78e82b715fc227af932\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161098c38038061098c83398101604081905261002f916100e2565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161007a565b50506001600160a01b031660805261011c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100df57600080fd5b50565b600080604083850312156100f557600080fd5b8251610100816100ca565b6020840151909250610111816100ca565b809150509250929050565b6080516108476101456000396000818161017701528181610270015261032201526108476000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a694fc3a11610050578063a694fc3a146100c0578063b5502573146100d3578063f2fde38b146100e657600080fd5b80632e1a7d4d14610077578063715018a61461008c5780638da5cb5b14610094575b600080fd5b61008a610085366004610672565b6100f9565b005b61008a610221565b6000546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61008a6100ce366004610672565b610235565b61008a6100e13660046106d7565b6103c5565b61008a6100f4366004610743565b610541565b33600090815260016020526040902054811115610142576040517fb062d7f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b1580156101d057600080fd5b505af11580156101e4573d6000803e3d6000fd5b50506040518381523392507f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b91506020015b60405180910390a250565b6102296105aa565b61023360006105fd565b565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f29190610780565b506040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b15801561037b57600080fd5b505af115801561038f573d6000803e3d6000fd5b50506040518381523392507fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef9150602001610216565b6103cd6105aa565b828114610406576040517fb57029f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8381101561053a57828282818110610423576104236107a2565b9050602002013560016000878785818110610440576104406107a2565b90506020020160208101906104559190610743565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461049e91906107d1565b9091555085905084828181106104b6576104b66107a2565b90506020020160208101906104cb9190610743565b73ffffffffffffffffffffffffffffffffffffffff167fb25b424ab14b1b3b1bedc8b2057826c875e4b7c9f4b2e7f1a36252345f19f1b1848484818110610514576105146107a2565b9050602002013560405161052a91815260200190565b60405180910390a2600101610409565b5050505050565b6105496105aa565b73ffffffffffffffffffffffffffffffffffffffff811661059e576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6105a7816105fd565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610233576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610595565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561068457600080fd5b5035919050565b60008083601f84011261069d57600080fd5b50813567ffffffffffffffff8111156106b557600080fd5b6020830191508360208260051b85010111156106d057600080fd5b9250929050565b600080600080604085870312156106ed57600080fd5b843567ffffffffffffffff8082111561070557600080fd5b6107118883890161068b565b9096509450602087013591508082111561072a57600080fd5b506107378782880161068b565b95989497509550505050565b60006020828403121561075557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461077957600080fd5b9392505050565b60006020828403121561079257600080fd5b8151801515811461077957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8082018082111561080b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212206ab248ed1f8fad12c80c6ea4bc95fbe8d130746f39129c9163289ca0ea38756664736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063a694fc3a11610050578063a694fc3a146100c0578063b5502573146100d3578063f2fde38b146100e657600080fd5b80632e1a7d4d14610077578063715018a61461008c5780638da5cb5b14610094575b600080fd5b61008a610085366004610672565b6100f9565b005b61008a610221565b6000546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61008a6100ce366004610672565b610235565b61008a6100e13660046106d7565b6103c5565b61008a6100f4366004610743565b610541565b33600090815260016020526040902054811115610142576040517fb062d7f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b1580156101d057600080fd5b505af11580156101e4573d6000803e3d6000fd5b50506040518381523392507f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b91506020015b60405180910390a250565b6102296105aa565b61023360006105fd565b565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f29190610780565b506040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b15801561037b57600080fd5b505af115801561038f573d6000803e3d6000fd5b50506040518381523392507fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef9150602001610216565b6103cd6105aa565b828114610406576040517fb57029f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8381101561053a57828282818110610423576104236107a2565b9050602002013560016000878785818110610440576104406107a2565b90506020020160208101906104559190610743565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461049e91906107d1565b9091555085905084828181106104b6576104b66107a2565b90506020020160208101906104cb9190610743565b73ffffffffffffffffffffffffffffffffffffffff167fb25b424ab14b1b3b1bedc8b2057826c875e4b7c9f4b2e7f1a36252345f19f1b1848484818110610514576105146107a2565b9050602002013560405161052a91815260200190565b60405180910390a2600101610409565b5050505050565b6105496105aa565b73ffffffffffffffffffffffffffffffffffffffff811661059e576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6105a7816105fd565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610233576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610595565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561068457600080fd5b5035919050565b60008083601f84011261069d57600080fd5b50813567ffffffffffffffff8111156106b557600080fd5b6020830191508360208260051b85010111156106d057600080fd5b9250929050565b600080600080604085870312156106ed57600080fd5b843567ffffffffffffffff8082111561070557600080fd5b6107118883890161068b565b9096509450602087013591508082111561072a57600080fd5b506107378782880161068b565b95989497509550505050565b60006020828403121561075557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461077957600080fd5b9392505050565b60006020828403121561079257600080fd5b8151801515811461077957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8082018082111561080b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212206ab248ed1f8fad12c80c6ea4bc95fbe8d130746f39129c9163289ca0ea38756664736f6c63430008150033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/OpenStaking.sol:OpenStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8370,
        "contract": "contracts/OpenStaking.sol:OpenStaking",
        "label": "withdrawable",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}